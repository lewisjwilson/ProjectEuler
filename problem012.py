# Question
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?


# Solution

# Using the following information:
# https://math.stackexchange.com/questions/2487523/how-to-find-the-number-of-divisors-of-a-given-number
# To find the number of divisors of a given number, first we find the list of prime factors,
# Then, the given number can be expressed as: n = p^a * p^b * p^c *...
# The number of divisors is then (a+1)(b+1)(c+1)...

def primeFactors(n):
    prime_factors = []
    d = 2
    while n > 1:
        while n % d == 0:
            prime_factors.append(d)
            n /= d
        d = d + 1
    return prime_factors

def calcDivisors(primes):
    # counting how many instances of a prime: [[prime, instances], ...]
    p_count = [[p,primes.count(p)] for p in set(primes)]
    product = 1
    for item in p_count:
        product *= (item[1] + 1)
    return product
        

def triNum(n):
    triangle_number = 0
    for i in range(1, n+1):
        triangle_number += i
    return triangle_number


# nth triangle number
n = 1
triangle = 0
divisors = 0
while divisors < 500:
    triangle = triNum(n)
    pf = primeFactors(triangle)
    divisors = calcDivisors(pf)
    n += 1
    
print("Triangle number:", triangle, "has", divisors, "divisors!")
